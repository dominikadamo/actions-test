name: Deploy

env:
  DIR_WWW_PROD: /var/www/dominik.codeshape.de/prod
  DIR_WWW_STAGE: /var/www/dominik.codeshape.de/stage
  DIR_BACKUPS: /var/www/dominik.codeshape.de/backups

on:
  push:
    branches: [ master, dev ]
  release:
    tags:
      - 'v*'

jobs:

  one:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
    - run: npm install
    - run: npm -g install lerna
    - run: lerna bootstrap
    - run: lerna run build

  deploy_version:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    needs: [build]
    steps:
      - name: Copy files
        working-directory: packages/webapp/build
        run: cp -r . ${{ env.DIR_WWW_PROD }}
      - name: Check pwd
        run: pwd

  deploy_prod:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: self-hosted
    needs: [build]
    steps:
      - name: Copy files
        working-directory: build
        run: cp -r . ${{ env.DIR_WWW_PROD }}
      - name: Check pwd
        run: pwd


  deploy_stage:
    if: ${{ github.ref == 'refs/heads/dev' }}
    runs-on: self-hosted
    needs: [build]
    steps:
      - name: Copy files
        working-directory: packages/webapp/build
        run: cp -r . ${{ env.DIR_WWW_STAGE }}
      - name: Check pwd
        run: pwd


  env_prod:
    runs-on: self-hosted
    needs: [deploy_prod]
    steps:
      - name: Create env file
        working-directory: ${{ env.DIR_WWW_PROD }}
        run: |
          touch .env
          echo NODE_ENV=prod > .env
          echo PORT=3010 >> .env
          cat .env

  env_stage:
    runs-on: self-hosted
    needs: [deploy_stage]
    steps:
      - name: Create env file
        working-directory: ${{ env.DIR_WWW_STAGE }}
        run: |
          touch .env
          echo NODE_ENV=stage > .env
          echo PORT=3020 >> .env
          cat .env


  upload_artifact:
    runs-on: self-hosted
    needs: [env_stage,env_prod]
    if: always()
    steps:
      - name: Set backup filename
        run: |
          echo "::set-output name=FILENAME::${{ env.DIR_BACKUPS }}/$(date +'%Y-%m-%d-%H-%M-%S').tar.gz"
          echo "::set-output name=ARTIFACT::$(date +'%Y-%m-%d-%H-%M-%S').tar.gz"
        id: archive-filename
      - if: ${{ github.ref == 'refs/heads/dev' }}
        name: Make archive
        run: tar -zcvf ${{ steps.archive-filename.outputs.FILENAME }} ${{ env.DIR_WWW_STAGE }}
      - if: ${{ github.ref == 'refs/heads/master' }}
        name: Make archive
        run: tar zcvf ${{ steps.archive-filename.outputs.FILENAME }} ${{ env.DIR_WWW_PROD }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.archive-filename.outputs.ARTIFACT }}
          path: ${{ steps.archive-filename.outputs.FILENAME }}
        name: Upload artifact
